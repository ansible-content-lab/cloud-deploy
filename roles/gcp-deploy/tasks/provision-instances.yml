---
- name: Set Machine Type to Micro
  ansible.builtin.set_fact:
    machine_type: f1-micro
  when: instance_size == "micro"

- name: Set Machine Type to Small
  ansible.builtin.set_fact:
    machine_type: g1-small
  when: instance_size == "small"

- name: Set Machine Type to Medium
  ansible.builtin.set_fact:
    machine_type: n1-standard-1
  when: instance_size == "medium"

- name: Set Machine Type to large
  ansible.builtin.set_fact:
    machine_type: n1-standard-2
  when: instance_size == "large"

- name: Generate SSH Key pair
  community.crypto.openssh_keypair:
    path: "{{working_dir }}/id_ssh_rsa"
  register: ssh_key_output

- name: Update Ansible Tower Cloud SSH Credential
  ansible.controller.credential:
    name: Cloud Demo Instances Key
    organization: "Cloud Organization"
    tower_host: "{{ tower_url }}"
    tower_username: "{{ tower_user }}"
    tower_password: "{{ tower_pass }}"
    kind: ssh
    username: "{{ gcp_instance_username }}"
    ssh_key_data: "{{ lookup('file', '{{ working_dir }}/id_ssh_rsa') }}"
    tower_verify_ssl: false
  delegate_to: localhost
  run_once: true

- ansible.builtin.debug:
    var: ssh_key_output

- name: Gather Subnet Information
  google.cloud.gcp_compute_subnetwork_info:
    region: "{{ gcp_region }}"
    filters:
    - name = "{{ gcp_prefix }}-subnet"
  register: subnetwork_info

- name: Gather Network Information
  google.cloud.gcp_compute_network_info:
    filters:
    - name = "{{ gcp_prefix }}-vpc"
  register: network_info

- name: "Create GCP instances for {{ application }}"
  google.cloud.gcp_compute_instance:
    name: "{{ application }}-server-{{ item|int }}"
    machine_type: "{{ machine_type }}"
    disks:
    - auto_delete: 'true'
      boot: 'true'
      initialize_params:
        disk_name: "{{ gcp_prefix}}-disk-{{ item|int }}"
        disk_size_gb: 20
        source_image: "{{ gcp_disk_image }}"
    metadata:
      ssh-keys: "ec2-user:{{ ssh_key_output.public_key }} ec2-user"
    labels:
      provisioner: mford
      application: "{{ application }}"
      demo: appdeployment
      group: rhel
      cloud_provider: gcp
    network_interfaces:
    - network: "{{ network_info.resources[0] }}"
      access_configs:
      - name: External NAT
        nat_ip:
          name: "{{ gcp_prefix}}-address-{{ item|int }}"
        type: ONE_TO_ONE_NAT
      subnetwork: "{{ subnetwork_info.resources[0] }}"
    zone: "{{ gcp_zone }}"
    tags:
      items:
        - appdeployment
        - "{{ application }}"
    state: present
  with_sequence: count="{{ num_instances }}"
  no_log: true

- name: "Create GCP secrets engine instance"
  google.cloud.gcp_compute_instance:
    name: "{{ gcp_prefix}}-webserver"
    machine_type: n1-standard-1
    disks:
    - auto_delete: 'true'
      boot: 'true'
      initialize_params:
        disk_name: "{{ gcp_prefix}}-webserver-disk"
        disk_size_gb: 20
        source_image: "{{ gcp_disk_image }}"
    metadata:
      ssh-keys: "ec2-user:{{ ssh_key_output.public_key }} ec2-user"
    labels:
      provisioner: mford
      application: "{{ application }}"
      demo: appdeployment
      group: webserver
      cloud_provider: gcp
    network_interfaces:
    - network: "{{ network_info.resources[0] }}"
      access_configs:
      - name: External NAT
        nat_ip:
          name: "{{ gcp_prefix}}-webserver-address"
        type: ONE_TO_ONE_NAT
      subnetwork: "{{ subnetwork_info.resources[0] }}"
    zone: "{{ gcp_zone }}"
    tags:
      items:
        - appdeployment
        - "{{ application }}"
    state: present
  no_log: true
