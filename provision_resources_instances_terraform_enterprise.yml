---
- name: Provision Cloud infrastructure via Terraform
  hosts: localhost
  gather_facts: no
  vars:
    machine_type: default
  vars_files:
    - ./credentials/tower_creds.yml
    - ./vars/default-vars.yml

  tasks:

    - name: Provision GCP infrastructure via Terraform
      block:

        - name: Set Machine Type to Small
          set_fact:
            machine_type: g1-small
          when: instance_size == "small"

        - name: Set Machine Type to Medium
          set_fact:
            machine_type: n1-standard-1
          when: instance_size == "medium"

        - name: Set Machine Type to large
          set_fact:
            machine_type: n1-standard-2
          when: instance_size == "large"

        - name: Copy GCP Terraform Directory
          copy:
            src: "{{ playbook_dir }}/terraform/cloud-deploy/gcp_deploy"
            dest: /tmp
            mode: 0777

        - set_fact:
            gcp_project: '{{ lookup("env", "GCE_PROJECT") }}'

        - name: Ensure Terraform Variables File Exists
          template:
            src: "{{ playbook_dir }}/templates/gcp.auto.tfvars.j2"
            dest: /tmp/gcp_deploy/gcp.auto.tfvars
            owner: awx
            group: awx

        - name: Initialize Terraform
          command:
            cmd: terraform init
            chdir: /tmp/gcp_deploy

        - name: Terraform Plan
          command:
            cmd: terraform apply -auto-approve
            chdir: /tmp/gcp_deploy

        - name: Update Ansible Tower Cloud SSH Credential
          tower_credential:
            name: Cloud Demo Instances Key
            organization: "Cloud Organization"
            tower_host: "{{ tower_url }}"
            tower_username: "{{ tower_user }}"
            tower_password: "{{ tower_pass }}"
            kind: ssh
            username: "{{ gcp_instance_username }}"
            ssh_key_data: "{{ lookup('file', '/tmp/id_ssh_rsa') }}"
            tower_verify_ssl: false

      when: cloud_provider == "gcp"

    - name: Provision Resources on AWS
      block:

        - name: Set Machine Type to Small
          set_fact:
            machine_type: t2.small
            # ec2_root_volume_name: /dev/sda1
          when: instance_size == "small"

        - name: Set Machine Type to Medium
          set_fact:
            machine_type: t2.medium
            # ec2_root_volume_name: /dev/sda1
          when: instance_size == "medium"

        - name: Set Machine Type to large
          set_fact:
            machine_type: t2.large
            # ec2_root_volume_name: /dev/sda1
          when: instance_size == "large"

        - name: Copy AWS Terraform Directory
          copy:
            src: "{{ playbook_dir }}/terraform/cloud-deploy/aws_deploy"
            dest: /tmp
            mode: 0777

        # - shell:
        #     cmd: ansible-vault decrypt main.tf --vault-id ~/.ssh/.vault
        #     chdir: /tmp/aws_deploy


        - name: Ensure Terraform Variables File Exists
          template:
            src: "{{ playbook_dir }}/templates/aws.auto.tfvars.j2"
            dest: /tmp/aws_deploy/aws.auto.tfvars
            owner: awx
            group: awx

        - name: Initialize Terraform
          command:
            cmd: terraform init
            chdir: /tmp/aws_deploy
            # chdir: "{{ playbook_dir }}/terraform/cloud-deploy/aws_deploy"

        - name: Terraform Plan
          command:
            cmd: terraform apply -auto-approve
            chdir: /tmp/aws_deploy

        #TODO: https://registry.terraform.io/providers/nolte/awx/latest/docs/resources/credential_machine

        - name: Update Ansible Tower Cloud SSH Credential
          tower_credential:
            name: Cloud Demo Instances Key
            organization: "Cloud Organization"
            tower_host: "{{ tower_url }}"
            tower_username: "{{ tower_user }}"
            tower_password: "{{ tower_pass }}"
            kind: ssh
            username: "{{ aws_instance_username }}"
            ssh_key_data: "{{ lookup('file', '/tmp/' + ec2_prefix + '-key-private.pem') }}"
            # ssh_key_data: "{{ lookup('file', '/tmp/mford-linux-key-private.pem') }}"
            tower_verify_ssl: false

      when: cloud_provider == "aws"
