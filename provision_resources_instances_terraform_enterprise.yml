---
- name: Provision Cloud infrastructure via Terraform
  hosts: localhost
  gather_facts: no
  vars:
    machine_type: default
  vars_files:
    - ./credentials/tower_creds.yml
    - ./vars/default-vars.yml
    - ./credentials/tf_token.yml

  tasks:

    - name: Provision GCP infrastructure via Terraform
      block:

        - name: Set Machine Type to Small
          ansible.builtin.set_fact:
            machine_type: g1-small
          when: instance_size == "small"

        - name: Set Machine Type to Medium
          ansible.builtin.set_fact:
            machine_type: n1-standard-1
          when: instance_size == "medium"

        - name: Set Machine Type to large
          ansible.builtin.set_fact:
            machine_type: n1-standard-2
          when: instance_size == "large"

        - name: Copy GCP Terraform Directory
          ansible.builtin.copy:
            src: "{{ playbook_dir }}/terraform/cloud-deploy/gcp_deploy"
            dest: /tmp
            mode: 0777

        - ansible.builtin.set_fact:
            gcp_project: '{{ lookup("env", "GCE_PROJECT") }}'

        - name: Ensure Terraform Variables File Exists
          ansible.builtin.template:
            src: "{{ playbook_dir }}/templates/gcp.auto.tfvars.j2"
            dest: /tmp/gcp_deploy/gcp.auto.tfvars
            owner: awx
            group: awx

        - name: Initialize Terraform
          ansible.builtin.command:
            cmd: terraform init
            chdir: /tmp/gcp_deploy

        - name: Terraform Plan
          ansible.builtin.command:
            cmd: terraform apply -auto-approve
            chdir: /tmp/gcp_deploy

        - name: Update Ansible Tower Cloud SSH Credential
          ansible.controller.credential:
            name: Cloud Demo Instances Key
            organization: "Cloud Organization"
            tower_host: "{{ tower_url }}"
            tower_username: "{{ tower_user }}"
            tower_password: "{{ tower_pass }}"
            kind: ssh
            username: "{{ gcp_instance_username }}"
            ssh_key_data: "{{ lookup('file', '/tmp/id_ssh_rsa') }}"
            tower_verify_ssl: false

      when: cloud_provider == "gcp"

    - name: Provision Resources on AWS
      block:

        - name: Set Machine Type to Small
          ansible.builtin.set_fact:
            machine_type: t2.small
            # ec2_root_volume_name: /dev/sda1
          when: instance_size == "small"

        - name: Set Machine Type to Medium
          ansible.builtin.set_fact:
            machine_type: t2.medium
            # ec2_root_volume_name: /dev/sda1
          when: instance_size == "medium"

        - name: Set Machine Type to large
          ansible.builtin.set_fact:
            machine_type: t2.large
            # ec2_root_volume_name: /dev/sda1
          when: instance_size == "large"

        - name: Copy AWS Terraform Directory
          ansible.builtin.copy:
            src: "{{ playbook_dir }}/terraform/cloud-deploy/aws_deploy"
            dest: /tmp
            mode: 0777

        # - shell:
        #     cmd: ansible-vault decrypt main.tf --vault-id ~/.ssh/.vault
        #     chdir: /tmp/aws_deploy


        - name: Ensure Terraform Variables File Exists
          ansible.builtin.template:
            src: "{{ playbook_dir }}/templates/aws.auto.tfvars.j2"
            dest: /tmp/aws_deploy/aws.auto.tfvars
            # owner: awx
            # group: awx

        - name: Create .terraform.d directory
          ansible.builtin.file:
            path: /home/runner/.terraform.d/
            state: directory

        - name: Place API Token File in its proper location
          ansible.builtin.template:
            src: "{{ api_token_file }}"
            dest: /home/runner/.terraform.d/credentials.tfrc.json

        - name: Initialize Terraform
          ansible.builtin.command:
            cmd: terraform init
            chdir: /tmp/aws_deploy

        - name: Terraform Plan
          ansible.builtin.command:
            cmd: terraform apply -auto-approve
            chdir: /tmp/aws_deploy

        #TODO: https://registry.terraform.io/providers/nolte/awx/latest/docs/resources/credential_machine

        - name: Retrieve public Key from S3 
          amazon.aws.aws_s3:
            bucket: mford-terraform-key-bucket
            object: "{{ ec2_prefix }}-key.pub"
            dest: "/tmp/{{ ec2_prefix }}-key.pub"
            mode: get

        - name: Retrieve Private Key from S3 
          amazon.aws.aws_s3:
            bucket: mford-terraform-key-bucket
            object: "{{ec2_prefix}}-key-private.pem"
            dest: "/tmp/{{ec2_prefix}}-key-private.pem"
            mode: get

        - name: Add Terraform Variables to S3
          amazon.aws.aws_s3:
            bucket: mford-terraform-key-bucket
            object: aws.auto.tfvars
            src: /tmp/aws_deploy/aws.auto.tfvars
            mode: put

        - name: Add terraform.lock.hcl to S3
          amazon.aws.aws_s3:
            bucket: mford-terraform-key-bucket
            object: .terraform.lock.hcl
            src: /tmp/aws_deploy/.terraform.lock.hcl
            mode: put
        
        # - name: add terraform state files to S3
        #   community.aws.s3_sync:
        #     bucket: mford-terraform-key-bucket
        #     file_root: /tmp/aws_deploy/.terraform/

        - name: add terraform state files to S3
          ansible.builtin.command: "aws s3 cp /tmp/aws_deploy/.terraform/ s3://mford-terraform-key-bucket/.terraform/ --recursive"

        - name: Update Ansible Tower Cloud SSH Credential
          ansible.controller.credential:
            name: Cloud Demo Instances Key
            organization: "Cloud Organization"
            controller_host: "{{ tower_url }}"
            controller_username: "{{ tower_user }}"
            controller_password: "{{ tower_pass }}"
            credential_type: Machine
            inputs:
              ssh_key_data: "{{ lookup('file', '/tmp/' + ec2_prefix + '-key-private.pem') }}"
              username: "{{ aws_instance_username }}"
            # ssh_key_data: "{{ lookup('file', '/tmp/mford-linux-key-private.pem') }}"
            validate_certs: no

      when: cloud_provider == "aws"
